(From pc to mcu)
Start
Length 2x7-bit
Instruction (+bank)
Payload length
[ Offset u8 ]
[ Payload ]
CRC

(From mcu to pc)
Start
Length 2x7-bit
{Status 1}
{Status 2}
Instruction (+bank)
Payload length
[ Offset u8 ]
[ Payload ]
CRC

Instructions:
(bank-less)
	Poll
	Set device description (page size, signature etc.)
	Set access parameters (speed etc.)
(with bank)
	Set bank header (with full bank header)
	Add data to bank (with some data payload)
	Request data from bank (w offset as payload)
	Ack/clear bank

In instruction, bit 7 selects bank. Instructions 00-0F have no bank

Bank header contains:
Operation
	Enter programming
	Chip erase
	Read params (Signature, fuses)
	Write flash
	Write EEPROM
	Write fuse/lock
	Exit programming
	Reset target
Offset u32
Flags
	Use page access
	Verify
	Hard delay (disable polling)
Payload size

Status structure contains:
Bank status (enum)
Not received byte offset (data should be filled incrementally)





// Older docs below

Address can be divided as follows:
Extended address
Page address
Offset (relative to page)
LSB bit (high/low byte of word)

All those parts of address have fixed bit length, that should be described in configuration file.


Target description is as follows:
* name
* flash size
* page size
* use extended address
* eeprom size
* eeprom page size
* use eeprom page access


Endpoint:
<header>
* task number (uint8_t). Non-zero!
* Flags:
*   0 - read
*   1 - write
*   2 - verify
*   3 - perform chip erase
*   4 -
*   5 -
*   6 - disable page write feature
*   7 - do not check signature
* task status (enum)
* address start (uint32_t). MSB differs - flash or EEPROM
* payload size (uint16_t, up to 256)
</header>
* payload remaining to be transfered (uint16_t)
* payload (256 bytes)

task status can be:
* Empty = 0
(send header)
* Filling (Buffer claimed. Waiting for write)
(send multiple packets to fill buffer)
* Queued (Data received or not needed)
(programmer waits for completion of another task)
* Writing
(programmer sends data to mcu)
* Waiting (after write)
(programmer waits and polls mcu)
* Reading
(programmer reads data from mcu to verify/read)
* Buffer ready (waiting for read)
(master sends multiple read commands and then ACKs)
* Finished (with result code)
(master reads response code and then ACKs)
